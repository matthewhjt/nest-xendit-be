// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  updatedAt     DateTime       @updatedAt() @db.Timestamptz()
  createdAt     DateTime       @default(now()) @db.Timestamptz()
  id            String         @id() @unique() @default(uuid())
  fullName      String?
  email         String         @unique()
  password      String
  subscriptions Subscription[]
  payments      Payment[]
}

model SubscriptionPlan {
  id            String         @id @default(uuid())
  name          String        
  durationDays  Int            
  price         Decimal        @db.Money 
  description   String?
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now()) @db.Timestamptz()
  updatedAt     DateTime       @updatedAt @db.Timestamptz()
  subscriptions Subscription[]
  payments      Payment[]
}

model Subscription {
  id        String             @id @default(uuid())
  user      User               @relation(fields: [userId], references: [id])
  userId    String
  startDate DateTime           @default(now()) @db.Timestamptz()
  endDate   DateTime           @db.Timestamptz()
  createdAt DateTime           @default(now()) @db.Timestamptz()
  updatedAt DateTime           @updatedAt() @db.Timestamptz()
  subscriptionPlan SubscriptionPlan @relation(fields: [planId], references: [id])
  planId           String
  status    SubscriptionStatus
  payment          Payment?         @relation(fields: [paymentId], references: [id])
  paymentId        String?          @unique
}

model Payment {
  id                String        @id @default(uuid())
  user              User          @relation(fields: [userId], references: [id])
  userId            String
  subscriptionPlan  SubscriptionPlan @relation(fields: [planId], references: [id])
  planId            String
  subscription      Subscription?
  
  xenditInvoiceId   String?       @unique
  xenditExternalId  String        @unique
  paymentUrl        String?
  
  amount            Decimal       @db.Money
  paymentMethod     PaymentMethod?
  status            PaymentStatus @default(PENDING)
  
  paidAt            DateTime?     @db.Timestamptz()
  expiresAt         DateTime?     @db.Timestamptz()
  createdAt         DateTime      @default(now()) @db.Timestamptz()
  updatedAt         DateTime      @updatedAt @db.Timestamptz()
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  PAID
  EXPIRED
}

enum PaymentMethod {
  CREDIT_CARD
  BCA
  BNI
  BRI
  MANDIRI
  PERMATA
  BSI
  CIMB
  QRIS
}

model Class {
  id          String    @id @default(uuid())
  title       String
  description String
  tutorName   String
  tutorTitle  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  chapters    Chapter[]
}

model Chapter {
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  id        String   @id @default(uuid())
  title     String
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
  subchapters SubChapter[]
}

model SubChapter {
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt() @db.Timestamptz()
  id        String   @id @default(uuid())
  title     String
  content   String
  isFree    Boolean  @default(false)
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
  chapterId String
}
